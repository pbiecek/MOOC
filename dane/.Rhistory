tab <- table(realcl,moj.knn)
result[i,2] <- sum(diag(tab))/sum(tab)
}
result
library(ggplot2)
x.cell.boundary <- c(0, 4, 6, 8, 10, 14)
example <- data.frame(
x = 1:5,
y = factor(rep(1, each=5)),
z = 1:5
)
ggplot(result, aes(x=kv, y=num, fill=kp))+
geom_tile()
result["kp"]<-runif(5)
### coÅ“ z innego pliku
library("ggplot2")
library("scales")
library("grid")
liczba.klas <- 3
lk <- 4
klasa <- rep(c("A","B","C"),lk)
punkty <- ((1:(liczba.klas+1))/(liczba.klas+1))[1:liczba.klas]
k <- rep(1:lk,e=liczba.klas)
licznosc <- floor(runif(12)*10)+1
dane <- data.frame(klasa,pkt=rep(punkty,lk),k,licznosc,num=rep(1,12),
prec=rep(result$kp,e=liczba.klas))
dane
p <- ggplot(dane, aes(x=k, y=klasa))+
theme_bw() +
ggtitle("Precyzja klasyfikacji w zaleÂ¿noÅ“ci od \nwybranego k w metodzie knn")+
theme(
axis.title=element_text(size=14,face="bold"),
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank(),
plot.margin=unit(c(0,0,0,0),"mm"),
axis.ticks.length=unit(0, "mm"),
axis.ticks.margin=unit(0, "mm"),
plot.title = element_text(size = 25)
)+
geom_tile(aes(fill=prec))+
scale_fill_gradient(low="#C2E699", high="#006837")+
geom_point(aes(size=licznosc))
p
dane <- data.frame(klasa,pkt=rep(punkty,lk),k,licznosc,num=rep(1,12),
prec=rep(result$kp,e=liczba.klas))
library(cluster)
## generate 25 objects, divided into 2 clusters.
x <- rbind(cbind(rnorm(15,0,0.5), rnorm(15,0,0.5)),
cbind(rnorm(10,5,0.5), rnorm(10,5,0.5)))
pamx <- pam(x, 2)
str(pamx)
plot(pamx, which=2)
pamx$silinfo
cluster:::plot.partition
pamix <- pamx
plotDFobject <- function( frame, k , m){
stopifnot( is.data.frame( frame ), is.numeric( k ) )
plotPAMobject( pam( frame, k ) )
}
plotDFobject( train, 2)
library(reshape2)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
plotPAMobject <- function( pamix, m = NULL ){
stopifnot( any( class(pamix) == "partition" ) )
frame <- as.data.frame( pamix$silinfo$widths )
frame[4] <- row.names(frame)
names(frame)[4] <- "observation"
ladne_kolory <- sample(c("#00008B", "#8B3E2F", "#8B6508", "#66CD00", "#8B0000"))
for (i in 1:length(unique(frame$cluster)) ){
if ( i  < length(unique(frame$cluster)) ){
assign( paste0("frame",i), frame[frame$cluster==i,])
assign( paste0("wykres",i), ggplot( get(paste0("frame",i)), aes( y = sil_width, x = observation ) )+
geom_bar(stat="identity", colour="black", fill= ladne_kolory[i]) +
coord_flip() +
scale_x_discrete(limits= get(paste0("frame",i))$observation[order(get(paste0("frame",i))$sil_width)])+
theme( panel.background=element_rect(fill='white'),
axis.text.x = element_blank(),
axis.text.y = element_text(family = "mono", size = 15),
axis.title.x= element_blank(),
axis.title.y= element_text(family = "mono", size = 20),
title =element_text(family = "mono", size = 25)
)+
labs(x = "obserwacje", y="miara silhouette")+
scale_colour_brewer(palette="Set1")+
geom_hline(aes(yintercept=0.25),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=0.75),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=0.50),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=1.00),linetype=2,col='black',size=1,alpha=0.4)+
annotate("text", x = 1:2, y = 0.35:0.35, label = c(paste0("?rednio: ", format(pamix$silinfo$clus.avg.widths[i], digits =2) ),
paste0("licznosc: ", pamix$clusinfo[i,1] )) ) )
}else{
assign( paste0("frame",i), frame[frame$cluster==i,])
assign( paste0("wykres",i), ggplot( get(paste0("frame",i)), aes( y = sil_width, x = observation ) )+
geom_bar(stat="identity", colour="black", fill= ladne_kolory[i]) +
coord_flip() +
scale_x_discrete(limits= get(paste0("frame",i))$observation[order(get(paste0("frame",i))$sil_width)])+
theme( panel.background=element_rect(fill='white'),
axis.text.x = element_text(family = "mono", size = 15),
axis.text.y = element_text(family = "mono", size = 15),
axis.title.x= element_text(family = "mono", size = 20),
axis.title.y= element_text(family = "mono", size = 20),
title =element_text(family = "mono", size = 25)
)+
labs(x = "obserwacje", y="miara silhouette")+
scale_colour_brewer(palette="Set1") +
geom_hline(aes(yintercept=0.25),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=0.75),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=0.50),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=1.00),linetype=2,col='black',size=1,alpha=0.4)+
annotate("text", x = 1:2, y = 0.35:0.35, label = c(paste0("?rednio: ", format(pamix$silinfo$clus.avg.widths[i], digits =2) ),
paste0("licznosc: ", pamix$clusinfo[i,1] )) ) )
#scale_x_continuous(labels = percent)   )
}
}
grid.newpage()
for (i in 1:length(unique(frame$cluster)) ){
print(get(paste0("wykres",i)), vp=viewport(x=0.75, y = 1-i/length(unique(frame$cluster))+0.25,
width=0.5, height=1/length(unique(frame$cluster))+0.03 ))
}
if( !is.null(m) ){
print(m, vp=viewport( x= 0.25, y = 0.5, width = 0.5, height = 1))
}
}
plotPAMobject(pamix, m)
library(cluster)
## generate 25 objects, divided into 2 clusters.
x <- rbind(cbind(rnorm(15,0,0.5), rnorm(15,0,0.5)),
cbind(rnorm(10,5,0.5), rnorm(10,5,0.5)))
pamx <- pam(x, 2)
str(pamx)
plot(pamx, which=2)
pamx$silinfo
cluster:::plot.partition
pamix <- pamx
plotDFobject <- function( frame, k , m){
stopifnot( is.data.frame( frame ), is.numeric( k ) )
plotPAMobject( pam( frame, k ) )
}
plotDFobject( train, 2)
library(reshape2)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
plotPAMobject <- function( pamix, m = NULL ){
stopifnot( any( class(pamix) == "partition" ) )
frame <- as.data.frame( pamix$silinfo$widths )
frame[4] <- row.names(frame)
names(frame)[4] <- "observation"
ladne_kolory <- sample(c("#00008B", "#8B3E2F", "#8B6508", "#66CD00", "#8B0000"))
for (i in 1:length(unique(frame$cluster)) ){
if ( i  < length(unique(frame$cluster)) ){
assign( paste0("frame",i), frame[frame$cluster==i,])
assign( paste0("wykres",i), ggplot( get(paste0("frame",i)), aes( y = sil_width, x = observation ) )+
geom_bar(stat="identity", colour="black", fill= ladne_kolory[i]) +
coord_flip() +
scale_x_discrete(limits= get(paste0("frame",i))$observation[order(get(paste0("frame",i))$sil_width)])+
theme( panel.background=element_rect(fill='white'),
axis.text.x = element_blank(),
axis.text.y = element_text(family = "mono", size = 15),
axis.title.x= element_blank(),
axis.title.y= element_text(family = "mono", size = 20),
title =element_text(family = "mono", size = 25)
)+
labs(x = "obserwacje", y="miara silhouette")+
scale_colour_brewer(palette="Set1")+
geom_hline(aes(yintercept=0.25),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=0.75),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=0.50),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=1.00),linetype=2,col='black',size=1,alpha=0.4)+
annotate("text", x = 1:2, y = 0.35:0.35, label = c(paste0("?rednio: ", format(pamix$silinfo$clus.avg.widths[i], digits =2) ),
paste0("licznosc: ", pamix$clusinfo[i,1] )) ) )
}else{
assign( paste0("frame",i), frame[frame$cluster==i,])
assign( paste0("wykres",i), ggplot( get(paste0("frame",i)), aes( y = sil_width, x = observation ) )+
geom_bar(stat="identity", colour="black", fill= ladne_kolory[i]) +
coord_flip() +
scale_x_discrete(limits= get(paste0("frame",i))$observation[order(get(paste0("frame",i))$sil_width)])+
theme( panel.background=element_rect(fill='white'),
axis.text.x = element_text(family = "mono", size = 15),
axis.text.y = element_text(family = "mono", size = 15),
axis.title.x= element_text(family = "mono", size = 20),
axis.title.y= element_text(family = "mono", size = 20),
title =element_text(family = "mono", size = 25)
)+
labs(x = "obserwacje", y="miara silhouette")+
scale_colour_brewer(palette="Set1") +
geom_hline(aes(yintercept=0.25),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=0.75),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=0.50),linetype=2,col='white',size=1,alpha=0.4)+
geom_hline(aes(yintercept=1.00),linetype=2,col='black',size=1,alpha=0.4)+
annotate("text", x = 1:2, y = 0.35:0.35, label = c(paste0("?rednio: ", format(pamix$silinfo$clus.avg.widths[i], digits =2) ),
paste0("licznosc: ", pamix$clusinfo[i,1] )) ) )
#scale_x_continuous(labels = percent)   )
}
}
grid.newpage()
for (i in 1:length(unique(frame$cluster)) ){
print(get(paste0("wykres",i)), vp=viewport(x=0.75, y = 1-i/length(unique(frame$cluster))+0.25,
width=0.5, height=1/length(unique(frame$cluster))+0.03 ))
}
if( !is.null(m) ){
print(m, vp=viewport( x= 0.25, y = 0.5, width = 0.5, height = 1))
}
}
plotPAMobject(pamix, m)
### Praca autorstwa:
# Anita Szewczyk
# Piotr Prostko
# Norbert Ryciak
# Wiktor Ryciuk
miniaturka <- function (x){
warnings(FALSE)
is_installed <- function(pcg) is.element(pcg, installed.packages()[,1])
pakiety<-c('ggplot2',"survival","gridExtra","reshape","scales","gtable")
suppressWarnings(
for (i in 1:length(pakiety)){
if (!is_installed(pakiety[i])) install.packages(pakiety[i])
library(pakiety[i],character.only = TRUE)
}
)
if (class(x)!="survfit") stop("Nalezy podac obiekt klasy survfit!")
fit <- data.frame(time=x$time,surv=x$surv,n.risk=x$n.risk,n.event=x$n.event,
n.censor=x$n.censor,CIu=x$upper,CIl=x$lower)
n <- nrow(fit)
attach(fit,warn.conflicts=FALSE)
krzywa <- ggplot(fit,aes(x=time,y=surv))+
geom_step(size=1.2)+
geom_step(aes(x=time,y=CIu),color=2,size=1,linetype='longdash')+
geom_step(aes(x=time,y=CIl),color=2,size=1, linetype='longdash')+
ggtitle("Survival curve") +
ylab("S(t)")+
scale_x_continuous(breaks=c(0,pretty(time)))+
theme(plot.title = element_text( colour ="blue3", size =28, vjust= 0.9),
axis.title.x = element_blank(),
axis.title.y=element_text(size=18,vjust=0.85),
axis.text.y=element_text(size=18,hjust=0),
axis.text.x=element_text(size=18,hjust=0.1),
panel.border = element_blank(),
panel.background = element_rect(fill = '#E69F0090', colour = 'black',size=1.4))
cenz <- ggplot(data=fit, aes(x=time, ymax=n.censor,ymin=0,colour="green"))+
geom_linerange()+
geom_linerange(aes(x=time, ymax=n.event,ymin=0,colour='red'),position=position_dodge(.1))+
scale_y_reverse(expand=c(0,0),lim=c(max(n.censor,n.event),0)) +
scale_x_continuous(breaks=c(0,pretty(time)))+
ylab("# censor./ events")+
theme(legend.position="bottom") +
scale_colour_discrete(name ="",labels=c("cens", "event"))+
theme(axis.title.y = element_text(size=20,vjust=0.85),
axis.text.y=element_text(size=18,hjust=0),
axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
panel.border = element_blank(),
axis.title = element_text(size = 21),
panel.background = element_rect(fill = '#E69F0090', colour = 'black',size=1.4)
)
####
#Extract Grobs
g1<-ggplotGrob(krzywa)
g2<-ggplotGrob(cenz)
#Bind the tables
g<-gtable:::rbind_gtable(g1, g2, "first")
panels <- g$layout$t[grep("panel", g$layout$name)]
g$heights[panels] <- lapply(c(2,1.5), unit, "null")
#Remove a row between the plots
g <- gtable_add_rows(g, unit(-1,"cm"), pos=nrow(g1))
#draw
grid.newpage()
grid.draw(g)
}
setwd("~/GitHub/TechnikiWizualizacjiDanych/MINI_MIMUW_2014/Miniaturka/Faza 2/Szewczyk_Prostko_Ryciak_Ryciuk/")
dane<-read.csv("aidssi.csv")
head(dane)
dane[,3] <- ifelse(dane[,3]==0,0,1)
a <- survfit(Surv(time,status)~1,data=dane)
miniaturka(a)
library("rms")
library("survival")
install.packages("")
install.packages("rms")
library("rms")
a <- survfit(Surv(time,status)~1,data=dane)
miniaturka(a)
dane=read.dta("
BreastFeeding.dta")
names(dane)[2]='stopind'
head(dane)
a <- survfit(Surv(feed,stopind)~1,data=dane)
miniaturka(a)
mieszkaniaKWW2011 <-
read.table("http://tofesi.mimuw.edu.pl/~cogito/smarterpoland/mieszkaniaKWW2011/mieszkaniaKWW2011.csv",
row.names=NULL, sep=";", header=TRUE,
colClasses=c("factor", "factor", "numeric", "numeric", "factor", "numeric", "numeric", "factor", "Date"))
load("/Users/pbiecek/Downloads/konkursPAZUR.rda")
ls()
head(skiJumps2013)
variableDictionary
ggplot(skiJumps2013, aes(x=compDate, y=classPoints, col=jumperSurname)) + geom_line()
skiJumps2013 <- skiJumps2013%>% filter(compDate < "2015-01-01")
ggplot(skiJumps2013, aes(x=compDate, y=classPoints, col=jumperSurname)) + geom_line()
skiJumps2013b <- skiJumps2013 %>% group_by(jumperSurname) %>% arrange(compDate) %>% mutate(new=cumsum(classPoints, na.rm=TRUE))
skiJumps2013b <- skiJumps2013 %>% group_by(jumperSurname) %>% arrange(compDate) %>% mutate(new=cumsum(classPoints))
ggplot(skiJumps2013b, aes(x=compDate, y=new, col=jumperSurname)) + geom_line()
table(skiJumps2013$compDate)
summary(skiJumps2013$compDate)
skiJumps2013 %>% filter(jumperCountry == "POL")
unique((skiJumps2013 %>% filter(jumperCountry == "POL") )[,1:2])
load("/Users/pbiecek/Downloads/konkursPAZUR.rda")
unique((skiJumps2013 %>% filter(jumperCountry == "POL") )[,1:2])
summary(skiJumps2013$compDate)
table(skiJumps2013$compDate)
skiJumps2013$compDate[skiJumps2013$compDate > "2015-01-01"] = "2014-03-21"
table(skiJumps2013$compDate)
summary(skiJumps2013$compDate)
head(skiJumps2013,2)
variableDictionary
head(skiJumps2013,2)
variableDictionary
skiJumps2013sel <- skiJumps2013 %>% select(jumperSurname, jumperName, compName, compCountry, compDate, compKPoint, jumpSeries, jumperCountry, jumpSpeed, jumpDistance, jumpPoints, jumpTotalPoints, compTotalPoints, classPoints, classPrize, jumperDateOfBirth)
head(skiJumps2013sel,2)
skiJumps2013sel %>% arrange(jumperSurname) %>% head(5)
skiJumps2013 <- skiJumps2013sel
variableDictionary[variableDictionary$NewName %in% colnames(skiJumps2013),]
variableDictionary[variableDictionary$NewName %in% colnames(skiJumps2013),]
rownames(variableDictionary) = variableDictionary[,1]
variableDictionary[colnames(skiJumps2013),]
variableDictionary[colnames(skiJumps2013),][-15,]
variableDictionary[colnames(skiJumps2013),][-16,]
variableDictionary[colnames(skiJumps2013),][-16,2]
variableDictionary[colnames(skiJumps2013),][-16,]
variableDictionary[colnames(skiJumps2013),][-16,] -> skiJumps2013labels
variableDictionary[colnames(skiJumps2013),][-16,2,drop=F] -> skiJumps2013labels
skiJumps2013labels
save(skiJumps2013labels, file="skiJumps2013labels.rda")
save(skiJumps2013, file="skiJumps2013.rda")
head(mieszkaniaKWW2011,2)
library(installr)
moj_folder <- download_RStudio_CRAN_data(START='2014-08-30', END='2014-11-22')
system.time({
moje_dane <- read_RStudio_CRAN_data()
moje_dane_przeformatowane  <- format_RStudio_CRAN_data(moje_dane)
lineplot_package_downloads(pkg_names = c("bgmm"),
dataset = moje_dane_przeformatowane)
barplot_package_users_per_day(c("bgmm"), moje_dane_przeformatowane)
})
install.packages("installr")
setwd("~/")
library(devtools)
install_github("pbiecek/SmarterPoland")
library(SmarterPoland)
head(skiJumps2013)
ggplot(skiJumps2013, aes(x=jumperCountry)) + geom_bar()
skiJumps2013$jumperCountry <- reorder(skiJumps2013$jumperCountry, skiJumps2013$jumperCountry, length
)
ggplot(skiJumps2013, aes(x=jumperCountry)) + geom_bar()
ggplot(skiJumps2013, aes(x=jumperCountry)) + geom_bar() + coord_flip()
skiJumps2013 %>%
group_by(jumperCountry) %>%
summarize(suma = sum(classPoints, na.rm=TRUE))
skiJumps2013 %>%
group_by(jumperCountry) %>%
summarise(suma = sum(classPoints, na.rm=TRUE))
skiJumps2013 %>%
group_by(jumperCountry) %>%
summarise(suma = sum(jumpTotalPoints, na.rm=TRUE))
head(skiJumps2013, 2)
skiJumps2013 %>%
group_by(jumperSurname, jumperName, jumperCountry) %>%
summarise(suma = sum(jumpTotalPoints, na.rm=TRUE))
skiJumps2013 %>%
group_by(jumperSurname, jumperName, jumperCountry) %>%
summarise(suma = sum(jumpTotalPoints, na.rm=TRUE)) %>%
arrange(suma)
skiJumps2013 %>%
group_by(jumperSurname, jumperName, jumperCountry) %>%
summarise(suma = sum(jumpTotalPoints, na.rm=TRUE))
sj <- skiJumps2013 %>%
group_by(jumperSurname, jumperName, jumperCountry) %>%
summarise(suma = sum(jumpTotalPoints, na.rm=TRUE))
sj %>%
arrange(suma)
sj
as.data.frame(sj) %>%
arrange(suma)
sj <- skiJumps2013 %>%
group_by(jumperSurname, jumperName, jumperCountry) %>%
summarise(suma = sum(classPoints, na.rm=TRUE))
as.data.frame(sj) %>%
arrange(suma)
head(auta2012,2)
ggplot(volkswagen, aes(x=Rok.produkcji)) +
geom_bar()
volkswagen <- auta2012 %>%
filter(Marka == "Volkswagen")
ggplot(volkswagen, aes(x=Rok.produkcji)) +
geom_bar()
ggplot(volkswagen, aes(x=Kolor)) +
geom_bar()
ggplot(volkswagen, aes(x=Kolor)) +
geom_bar() + coord_flip()
ggplot(volkswagen, aes(x=Rok.produkcji, y=Cena.w.PLN)) +
geom_point()
ggplot(volkswagen, aes(x=Rok.produkcji, y=Cena.w.PLN)) +
geom_point() + xlog()
summary(tmp <- getEurostatRCV("tsdtr210"))
autobus <- cast(tmp, geo ~ time, mean, subset = vehicle == "BUS_TOT")
head(autobus[, c(1, 13:22)], 3)
samochod <- cast(tmp, geo ~ time, mean, subset = vehicle == "CAR")
pociag   <- cast(tmp, geo ~ time, mean, subset = vehicle == "TRN")
head(tmp)
install.packages("SmarterPoland")
zmienna  =  2^10
zmienna2 <- 2^10
2 + 2
2^10
library(dplyr)
glimpse(iris)
library(devtools)
install_github("pbiecek/PogromcyDanych")
library(PogromcyDanych)
20000/20/8
20*8
160*150
dim(koty_ptaki)
summary(imiona_warszawa)
dim(imiona_warszawa)
length(levels(imiona_warszawa$imie))
tail(imiona_warszawa)
dim(imiona_warszawa)
head(imiona_warszawa)
levels(imiona_warszawa$imiona)
unique(imiona_warszawa$imiona)
unique(imiona_warszawa$imie)
levels(imiona_warszawa$imie)
dim(mandatySejmik2014)
dim(auta2012)
dim(WIG)
dim(galton)
dim(pearson)
dim(skiJumps2013)
head(skiJumps2013)
dim(diagnoza)
head(diagnozaDict[,2,drop=FALSE])
head(diagnoza, 2)
dim(serialeIMDB)
which.max(serialeIMDB$ocena == 10)
which.max(serialeIMDB$ocena)
serialeIMDB[serialeIMDB$ocena == 10,]
head(TCGA_BRCA)
dim(TCGA_BRCA)
summary(TCGA_BRCA)
boxplot(dni.do.smierci~czy.zyje, TCGA_BRCA)
load("mmG.rda")
setwd("~/Dropbox/_Prezentacje_I_Szkolenia_/2015_BigData_Tech_Summit/")
load("mmG.rda")
p1 <- nPlot(value ~ daty, group = "variable", data = mmG, type = "multiBarChart")
p1$chart(stacked = TRUE)
p1$addParams(dom = 'dekompozycja')
p1$set(width=800)
p1
require(rCharts)
p1 <- nPlot(value ~ daty, group = "variable", data = mmG, type = "multiBarChart")
p1$chart(stacked = TRUE)
p1$addParams(dom = 'dekompozycja')
p1$set(width=800)
p1
p1$show("iframesrc", cdn = TRUE)
p1 <- nPlot(value ~ daty, group = "variable", data = mmG, type = "multiBarChart")
p1$chart(stacked = TRUE)
p1$show("iframesrc", cdn = TRUE)
p1$print()
load("mmGrupy3.rda")
p1 <- nPlot(value ~ daty, group = "variable", data = mmG, type = "multiBarChart")
p1$chart(stacked = TRUE)
p1$show("iframesrc", cdn = TRUE)
p1
p1 <- nPlot(value ~ daty, group = "variable", data = mmGrupy3, type = "multiBarChart")
p1$chart(stacked = TRUE)
p1$show("iframesrc", cdn = TRUE)
p1
p1$show("inline", cdn = TRUE, include_assets = TRUE)
p1$show("inline", cdn = TRUE, include_assets = TRUE, standalone = TRUE)
p1$save('mychart2.html', standalone = TRUE)
str(load("mmGrupy3.rda"))
head(mmGrupy3)
mmGrupy3$value <- mmGrupy3$value*2.5 + runif(nrow(mmGrupy3))*1000
p1 <- nPlot(value ~ daty, group = "variable", data = mmGrupy3, type = "multiBarChart")
p1$chart(stacked = TRUE)
setwd("../../../GitHub/SmarterPoland_blog/2015/2015_BigData_Tech_Summit/")
p1
p1$save('mychart2.html', standalone = TRUE)
levels(mmGrupy3$variable)
mmGrupy3 <- mmGrupy3[mmGrupy3$variable != "reszta",]
p1 <- nPlot(value ~ daty, group = "variable", data = mmGrupy3, type = "multiBarChart")
p1$chart(stacked = TRUE)
p1
p1$save('mychart2.html', standalone = TRUE)
41.25 * 8
48*3
library(PogromcyDanych)
setLang()
cats_birds[1,]
apply(cats_birds, 1, paste, collapse=";")
cat(apply(cats_birds, 1, paste, collapse=";"), "\n")
cat(paste(apply(cats_birds, 1, paste, collapse=";"), collape="\n"))
colnames(cats_birds)
paste(colnames(cats_birds), collapse=";")
setwd("../../../MOOC/dane/")
save(cats_birds, file="cats_birds.rda")
