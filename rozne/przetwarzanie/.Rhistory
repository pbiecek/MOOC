library(xslx)
library(xlsx)
lirary(devtools)
library(devtools)
160/165
(160/165)^2
(161/165)^2
load("C:/Users/Karolina/Downloads/0b7c71f7a22077a26af3d056f8c642b3.rda")
ls()
pl\
pl
pl
pl$data
str(pl$data)
load("C:/Users/Karolina/Downloads/27bc46a5b0978357cd71623b8ebdb58c.rda")
ls()
pl
str(pl$data)
dev.off()
etykiety <- c("Nabycie nowej wiedzy, umiejętności",
"Zdobycie/utrzymywanie kontaktów towarzyskich",
"Zagospodarowanie wolnego czasu",
"Możliwość rozwijania swoich pasji, zainteresowań",
"Lepsze samopoczucie",
"Możliwość wykorzystania zdobytych umiejętności także poza spotkaniami")
wart <- c(30, 44.1,
32, 47.1,
23, 33.8,
45, 66.2,
29, 42.6,
13, 19.1)
data.frame(etykiety, wart)
library(ggplot2)
ggplot()
ggplot(dat, aes(x=etykiety, y=wart)) + geom_bar(stat="identity")
dat <- data.frame(etykiety, wart)
library(ggplot2)
ggplot(dat, aes(x=etykiety, y=wart)) + geom_bar(stat="identity")
s(x=etykiety, y=wart)) + geom_bar(stat="identity") +
coord_flip()
ggplot(dat, aes(x=etykiety, y=wart)) + geom_bar(stat="identity") +
coord_flip()
ggplot(dat, aes(x=etykiety, y=wart)) + geom_bar(stat="identity") +
coord_flip() + ylab("") + xlab("")
dat$etykiety <- reoredr(dat$etykiety, dat$wart, mean)
library(ggplot2)
dat <- data.frame(etykiety, wart)
dat$etykiety <- reorder(dat$etykiety, dat$wart, mean)
ggplot(dat, aes(x=etykiety, y=wart)) + geom_bar(stat="identity") +
coord_flip() + ylab("") + xlab("")
ggplot(dat, aes(x=etykiety, y=wart)) + geom_bar(stat="identity") +
coord_flip() + ylab("") + xlab("") + ggtitle("Korzyści płynące z uczestnictwa w zajęciach chórów, orkiestr i zespołów muzycznych")
dat <- data.frame(etykiety, wart[seq(1,length(wart), 2)])
dat$etykiety <- reorder(dat$etykiety, dat$wart, mean)
ggplot(dat, aes(x=etykiety, y=wart)) + geom_bar(stat="identity") +
coord_flip() + ylab("") + xlab("") + ggtitle("Korzyści płynące z uczestnictwa w zajęciach chórów, orkiestr i zespołów muzycznych")
dat
dat <- data.frame(etykiety, wart = wart[seq(1,length(wart), 2)])
dat <- data.frame(etykiety, wart = wart[seq(1,length(wart), 2)])
dat$etykiety <- reorder(dat$etykiety, dat$wart, mean)
ggplot(dat, aes(x=etykiety, y=wart)) + geom_bar(stat="identity") +
coord_flip() + ylab("") + xlab("") + ggtitle("Korzyści płynące z uczestnictwa w zajęciach chórów, orkiestr i zespołów muzycznych")
install.packagesininstinstinstall
setwd("c:/_Przemek_/DropboxPBI/Dropbox/PAZUR")
load("konkursPAZUR.RData")
head(skiJumps2013)
head(skiJumps2013)
variableDictionary
variableDictionary
variableDictionary
variableDictionary
head(skiJumps2013, 2)
variableDictionary
summary(skiJumps2013)
variableDictionary[18,]
variableDictionary[19,]
ggplot(skiJumps2013, aes(x=jumpSpeed,
y=jumpWind,
color=compCountry)) +
geom_smooth(method="lm")
library(ggplot2)
ggplot(skiJumps2013, aes(x=jumpSpeed,
y=jumpWind,
color=compCountry)) +
geom_smooth(method="lm")
ggplot(skiJumps2013, aes(x=jumpSpeed,
y=jumpWind,
color=compCountry)) +
geom_smooth(method="lm", se=FALSE)
ggplot(skiJumps2013, aes(x=jumpSpeed,
y=jumpWind,
color=compCountry)) +
geom_smooth(method="lm", se=FALSE) +
xlim(75,110)
ggplot(skiJumps2013, aes(x=jumpSpeed,
y=jumpWind,
color=compCountry)) +
geom_smooth(method="lm", se=FALSE) +
xlim(80,105)
ggplot(skiJumps2013, aes(x=jumpSpeed,
y=jumpWind,
color=compCountry)) +
geom_smooth(method="lm", se=FALSE) +
geom_point() +
xlim(80,105)
skiJumps2013PL <- skiJumps2013 %>%
filter(compCountry %in% c("Poland",
"Norway"))
ggplot(skiJumps2013, aes(x=jumpSpeed,
y=jumpWind,
color=compCountry)) +
geom_smooth(method="lm", se=FALSE) +
geom_point() +
xlim(80,105)
skiJumps2013PL <- skiJumps2013 %>%
filter(compCountry %in% c("Poland",
"Norway"))
ggplot(skiJumps2013PL, aes(x=jumpSpeed,
y=jumpWind,
color=compCountry)) +
geom_smooth(method="lm", se=FALSE) +
geom_point() +
xlim(80,105)
skiJumps2013PL <- skiJumps2013 %>%
filter(compCountry %in% c("Poland",
"Norway"))
library(dplyr)
skiJumps2013PL <- skiJumps2013 %>%
filter(compCountry %in% c("Poland",
"Norway"))
ggplot(skiJumps2013PL, aes(x=jumpSpeed,
y=jumpWind,
color=compCountry)) +
geom_smooth(method="lm", se=FALSE) +
geom_point() +
xlim(80,105)
skiJumps2013 %>%
group_by(compCountry) %>%
summarise(sredniSkok = mean(jumpSpeed),
sredniWiatr = mean(jumpWind))
skiJumps2013co <- skiJumps2013 %>%
group_by(compCountry) %>%
summarise(sredniSkok = mean(jumpSpeed),
sredniWiatr = mean(jumpWind))
melt(skiJumps2013co)
library(reshape)
setwd("c:/_Przemek_/DropboxPBI/Dropbox/projektAgent/")
require(archivist)
shinySearchInLocalRepo("agentRepo")
require(epitools)
require(ggplot2)
require(gridExtra)
require(scales)
require(xlsx)
require(lubridate)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
source("functions.R")
span = 60
baselineMonts <- c("2014-04", "2014-05", "2014-06", "2014-07", "2014-08")
baselineName <- "Proximities"
locs <- c("Cap One - Charleston", "Metro - Clark2", "Metro - Phoenix",
"Asurion - Houston", "Samsung - Dallas", "Samsung - Dallas",
"Asurion - Miramar", "Asurion - Houston", "Bounce Energy - Houston",
"Asurion - Houston", "DTV - Charleston", "T-Mobile - Dasmarinas",
"Verizon VSO - Phoenix", "Bounce Energy - Houston", "T-Mobile - Dasmarinas",
"Metro - Clark2", "Metro - Phoenix", "Verizon VSO - Phoenix",
"Asurion - Miramar", "Northeast Utilities - Charleston")
ef <- read.table("Dept Codes for bonus experiment 5.20.csv", sep=";", header=T)
ef <- ef[!duplicated(ef[,1]),]
rownames(ef) <- ef[,1]
deptCodes <- ef
db.con <- dbConnect(drv, host="taac1.crrfz7zi7izw.us-east-1.redshift.amazonaws.com",port=5439,dbname="qfit",user="taac", password="TAAC_dtv_03!!")
ExperimentParticipant <- dbGetQuery(db.con, paste0("SELECT * FROM ExperimentParticipant"))
ExperimentSetup <- dbGetQuery(db.con, paste0("SELECT * FROM ExperimentSetup"))
rownames(ExperimentSetup) <- paste(ExperimentSetup$program, ExperimentSetup$location, ExperimentSetup$classstart, sep=".")
smalllocs <- unique(locs)
input <- list(loc = "Samsung - Dallas", span=span)
rer2 <- list()
input <- list(loc = lo, span=span)
tmp <- strsplit(input$loc, split=" - ")[[1]]
program = tmp[1]
location = tmp[2]
vr <- get3mRetention(span = input$span, program = program, location = location)
vr1 <- vr[[1]][,1:5, drop=FALSE]
vr2 <- vr[[2]][,1:5, drop=FALSE]
vr1 <- data.frame(vr1, hiring.month = ymd(paste0(rownames(vr1), "-01")))
vr2 <- data.frame(vr2, hiring.month = ymd(paste0(rownames(vr2), "-01")))
ndf <- rbind(data.frame(vr1, group = "experiment"),
data.frame(vr2, group = "baseline"))
ndf
ExperimentSurvey <- dbGetQuery(db.con, paste0("SELECT * FROM ExperimentSurvey"))
ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='HAMILTON' & (ExperimentSurvey$firstname=='DOREE-EL' )),]
#Raechelleanne.Lising (AVP - shouldn't qualify)
#WHERE IS SHE??ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='HAMILTON' & (ExperimentSurvey$firstname=='DOREE-EL' )),]
#Savannah.Williams (from a different class so doesn't qualify for the bonus, unsure how she was able to fill out the survey)?
ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='WILLIAMS' & (ExperimentSurvey$firstname=='SAVANNAH' )),]
#termed: not on the list
#Bridgette.Howell - termed
ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='Howell' & (ExperimentSurvey$firstname=='Bridgette' )),]
#Blanca Contreras Blanca.Contrerasgrim - terminated
ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='Contreras' & (ExperimentSurvey$firstname=='Blanca' )),]
#Jezra  Calaguas termed
ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='Calaguas' & (ExperimentSurvey$firstname=='Jezra' )),]
#Michelle  Dumapis termed
ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='Dumapis' & (ExperimentSurvey$firstname=='Michelle' )),]
#Abbigail  Labong termed
ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='Labong' & (ExperimentSurvey$firstname=='Abbigail' )),]
#duplicate:Jacklyn  Campas
ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='Campas' & (ExperimentSurvey$firstname=='Jacklyn' )),]
#duplicate "Gi""Aunie"  Loggins
ExperimentSurvey <- ExperimentSurvey[ ! (ExperimentSurvey$lastname=='Loggins' & (ExperimentSurvey$firstname=='"Gi""Aunie"' )),]
#for matching:
ExperimentSurvey$firstname[ExperimentSurvey$firstname=='Josef Gandhi, II'] <- 'Josefgandhi'
#Hazel.Valloyas  Hazel Marie  Valloyas
ExperimentSurvey$firstname[ExperimentSurvey$firstname=='Hazel Marie' & ExperimentSurvey$lastname=='Valloyas'] <- 'Hazel'
#Sigridjemimaker.Davi  Sigrid Jemima Kerren  David
ExperimentSurvey$lastname[ExperimentSurvey$firstname=='Sigrid Jemima Kerren' & ExperimentSurvey$lastname=='David'] <- 'Davi'
#Dawnpamelakeith.Sun1  Dawn Pamela Keith  Manio
ExperimentSurvey$lastname[ExperimentSurvey$firstname=='Dawn Pamela Keith' & ExperimentSurvey$lastname=='Manio'] <- 'Sun1'
#Jeneahdanica.Silerio  Jeneah Danica  Lee
ExperimentSurvey$lastname[ExperimentSurvey$firstname=='Jeneah Danica' & ExperimentSurvey$lastname=='Lee'] <- 'Silerio'
#Delbarrio.Jessie  Jessie	Del Barrio
ExperimentSurvey$firstname[ExperimentSurvey$firstname=='Jessie' & ExperimentSurvey$lastname=='Del Barrio'] <- 'Delbarrio'
ExperimentSurvey$lastname[ExperimentSurvey$firstname=='Delbarrio' & ExperimentSurvey$lastname=='Del Barrio'] <- 'Jessie'
set2 <- paste(tolower(ExperimentSurvey[,7]),
tolower(ExperimentSurvey[,8]),
sep=".")
ExperimentSurvey$codename <- set2
ExperimentSurvey <- ExperimentSurvey[!duplicated(ExperimentSurvey$codename),]
rownames(ExperimentSurvey) <- ExperimentSurvey$codename
input <- list(loc = lo, span=span)
tmp <- strsplit(input$loc, split=" - ")[[1]]
program = tmp[1]
location = tmp[2]
vr <- get3mRetention(span = input$span, program = program, location = location)
vr1 <- vr[[1]][,1:5, drop=FALSE]
vr2 <- vr[[2]][,1:5, drop=FALSE]
vr1 <- data.frame(vr1, hiring.month = ymd(paste0(rownames(vr1), "-01")))
vr2 <- data.frame(vr2, hiring.month = ymd(paste0(rownames(vr2), "-01")))
ndf <- rbind(data.frame(vr1, group = "experiment"),
data.frame(vr2, group = "baseline"))
ndf
tab <- rbind(colSums(ndf[rownames(ndf) %in% baselineMonts,c(1,2)]),
colSums(ndf[ndf$group == "experiment",c(1,2)]))
rownames(tab) = c("baseline", "experiment")
tab
baselineMonts
ndf[rownames(ndf) %in% baselineMonts,c(1,2)]
ndf[ndf$group == "experiment",c(1,2)]
tab <- rbind(colSums(ndf[ndf$group == "baseline" &
substr(ndf$hiring.month, 1, 7) %in% baselineMonts,c(1,2)]),
colSums(ndf[ndf$group == "experiment",c(1,2)]))
rownames(tab) = c("baseline", "experiment")
tab
searchInLocalRepo("adminRepo", pattern = "phase:gain")
searchInLocalRepo("adminRepo", pattern = "phase:gain")
searchInLocalRepo("agentRepo", pattern = "phase:gain")
rmFromRepo(searchInLocalRepo("agentRepo", pattern = "phase:gain"), repoDir = "agentRepo")
createGainPlots <- function(span=30,
baselineMonts =  c("2013-05", "2013-06", "2013-07", "2013-08"),
baselineName = "Same time last year") {
smalllocs <- unique(locs)
input <- list(loc = "Samsung - Dallas", span=span)
rer2 <- list()
for (lo in smalllocs)  {
input <- list(loc = lo, span=span)
tmp <- strsplit(input$loc, split=" - ")[[1]]
program = tmp[1]
location = tmp[2]
vr <- get3mRetention(span = input$span, program = program, location = location)
vr1 <- vr[[1]][,1:5, drop=FALSE]
vr2 <- vr[[2]][,1:5, drop=FALSE]
vr1 <- data.frame(vr1, hiring.month = ymd(paste0(rownames(vr1), "-01")))
vr2 <- data.frame(vr2, hiring.month = ymd(paste0(rownames(vr2), "-01")))
ndf <- rbind(data.frame(vr1, group = "experiment"),
data.frame(vr2, group = "baseline"))
# remove all rows with uknown status
# ndf[ndf$unknown > 0, "dropout.rate"] <- NA
tab <- rbind(colSums(ndf[ndf$group == "baseline" &
substr(ndf$hiring.month, 1, 7) %in% baselineMonts,c(1,2)]),
colSums(ndf[ndf$group == "experiment",c(1,2)]))
rownames(tab) = c("baseline", "experiment")
v3 <- if (prod(colSums(tab)) == 0 | prod(rowSums(tab)) == 0) {
c(NA, NA, NA, NA)
} else {
c(unlist(oddsratio(tab + 1)$measure[2,]), sum(tab[1,]))
}
# termination costs
tcosts <- (ExperimentSetup[ExperimentSetup$program == program & ExperimentSetup$location == location, "terminationcost"])[1]
hiringmonth <- substr(ndf$hiring.month, 1, 7)
selected <- hiringmonth %in% baselineMonts | ndf$group == "experiment"
aterCosts <- tapply(ndf$left[selected],
ndf$group[selected], sum) * tcosts /
tapply(ndf$all[selected], ndf$group[selected], sum)
tosave <- getProgramSummary(drv, sprogram = program, slocation = location)
money <- gsub(gsub(tosave$option, patter="^[^0-9]+", replace=""), pattern=" ret.*$", replace = "")
usd <- as.numeric(gsub(money, patter="[^0-9]+", replace=""))
usd[grep(money, pattern="PHP")] <- usd[grep(money, pattern="PHP")]/50
# later choose is it 30 or 60
##topay <- sum(usd[tosave[,10] > ifelse(grepl(tosave$option, pattern = "2 mont"), 60, 30)])
topay <- sum(usd[tosave[,10] > span], na.rm=TRUE)
rer2[[lo]] <-   rbind(data.frame(loc=input$loc, costs=aterCosts, group=names(aterCosts), type="termination", oddsr = v3[[1]], drop=rev(tab[,2] / rowSums(tab)), count=rev(rowSums(tab))),
data.frame(loc=input$loc, costs=topay/tapply(ndf$all, ndf$group, sum, na.rm=TRUE)[1], group="experiment", type="investment", oddsr = v3[[1]], drop=NA, count=sum(tab[2,])))
}
rerAll2 <- do.call(rer2, what = rbind)
rerAll2$type <- factor(rerAll2$type, labels=c(" termination", "investment"), ordered = T)
rerAll <- rerAll2
rerAll <- rerAll[!(rerAll$loc %in% as.character(rerAll$loc[is.na(rerAll$costs)])),]
pl <- ggplot(rerAll, aes(y=costs, x=loc, fill=type, group=group)) +
geom_bar(stat="identity", position="dodge", col="black") + coord_flip() + theme_bw() + xlab("")+
ggtitle(paste0("Invest plot, ", baselineName, " span:", span, " created: ", substr(now(),1,10)))
attr( rerAll, "tags" ) = c( "project:agents", "phase:gain" , "phase:invest", baselineName, paste0("location:",smalllocs), paste0("span:",span))
attr( pl, "tags" ) = c( "project:agents", "phase:gain" , "phase:invest",baselineName, paste0("location:",smalllocs), paste0("span:",span))
saveToRepo(rerAll, repoDir = "agentRepo")
saveToRepo(pl, repoDir = "agentRepo")
ExperimentSetup$loc <- paste(ExperimentSetup$program,ExperimentSetup$location,sep=" - ")
rerAllES <- merge(rerAll, unique(ExperimentSetup[,c("experimentalgroup", "loc")]))
m1 <- simplify2array(unclass(by(rerAllES, factor(rerAllES$loc), function(x) {
c(x$drop[2], x$drop[2] - x$drop[1], x$drop[1], x$drop[1]/x$drop[2])
})))
m2 <- simplify2array(unclass(by(rerAllES, factor(rerAllES$loc), function(x) {
c(x$experimentalgroup[1], as.character(x$loc[1]))
})))
m12 <- data.frame(t(m1), t(m2))
colnames(m12) <- c("drop.baseline", "drop.diff", "drop.exp", "drop.odds", "group", "loc")
pl2 <- ggplot(m12, aes(y=drop.exp, x=drop.baseline, col=group)) +
geom_smooth(method=lm, se=FALSE, alpha=0.5, size=2) +
geom_point(aes(shape=loc), size=5) +  theme_bw() +
xlab("drop rate in baseline") + ylab("drop rate in experiment") +
scale_shape_manual(values = LETTERS[1:11]) + geom_abline(xintercept=0, xslope=1) +
xlim(0,1) + ylim(0,1) +
ggtitle(paste0("Optim plot, ",baselineName,  ", span:", span, " created: ", substr(now(),1,10)))
attr( pl2, "tags" ) = c( "project:agents", "phase:gain" , "phase:invest", baselineName, paste0("location:",smalllocs), paste0("span:",span))
saveToRepo(pl2, repoDir = "agentRepo")
pl3 <- ggplot(m12, aes(y=1/drop.odds, x=drop.baseline, col=group)) +
geom_smooth(method=lm, se=FALSE, alpha=0.5, size=2) +
geom_point(aes(shape=loc), size=5) +  theme_bw() +
xlab("drop rate in baseline") + ylab("ratio of drop rates") +
scale_shape_manual(values = LETTERS[1:11]) +
ggtitle(paste0("Odds plot, ",baselineName,", span:", span,  " created: ", substr(now(),1,10))) +
xlim(0,1)
attr( pl3, "tags" ) = c( "project:agents", "phase:gain" , "phase:odds",baselineName, paste0("location:",smalllocs), paste0("span:",span))
saveToRepo(pl3, repoDir = "agentRepo")
}
createGainPlots(span = 60, baselineMonts = c("2013-05", "2013-06", "2013-07", "2013-08"),
baselineName = "Same time last year")
createGainPlots(span = 60, baselineMonts = c("2014-04", "2014-05", "2014-06", "2014-07", "2014-08"),
baselineName = "Proximities")
createGainPlots(span = 60, baselineMonts = c("2013-07", "2013-08", "2013-09", "2013-10", "2013-11", "2013-12", "2014-01", "2014-02", "2014-03", "2014-04", "2014-05", "2014-06" ),
baselineName = "Whole year")
createGainPlots(span = 60, baselineMonts = c("2014-01", "2014-02", "2014-03", "2014-04", "2014-05", "2014-06" ),
baselineName = "First half of 2014")
shinySearchInLocalRepo("agentRepo")
setwd("c:/Users/Karolina/Documents/GitHub/MOOC/przetwarzanie")
